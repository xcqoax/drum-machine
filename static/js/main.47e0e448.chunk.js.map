{"version":3,"sources":["Components/Pruebas.js","App.js","serviceWorker.js","index.js"],"names":["console","log","backOne","Pruebas","props","state","estado","url","id","power","powerSignal","bank","obtenerValor","bind","playSound","encendido","handleKeyPress","document","addEventListener","this","e","valorDrumPad","filter","i","keyCode","setState","backTwo","keyTrigger","target","value","audio","Audio","src","currentTime","play","className","name","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47e0e448.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nimport { backOne } from './backOne.json';\r\nimport { backTwo } from './backTwo.json';\r\n\r\nconsole.log(backOne)\r\nclass Pruebas extends Component {\r\nconstructor(props) {\r\n  super(props);\r\n  this.state = {\r\n    estado : backOne,\r\n    url : '',\r\n    id:'',\r\n    power: true,\r\n    powerSignal: 'on',\r\n    bank: 1\r\n  };\r\n\r\nthis.obtenerValor = this.obtenerValor.bind(this);\r\nthis.playSound = this.playSound.bind(this);\r\nthis.encendido = this.encendido.bind(this);\r\nthis.bank = this.bank.bind(this);\r\nthis.handleKeyPress = this.handleKeyPress.bind(this);\r\n}\r\n\r\ncomponentDidMount() {\r\n  document.addEventListener('keydown', this.handleKeyPress);\r\n}\r\n\r\nhandleKeyPress(e) {\r\n  if(this.state.power === true){\r\n      let valorDrumPad = this.state.estado.filter(i => i.keyCode === e.keyCode)\r\n      this.setState({\r\n        url: valorDrumPad[0].url,\r\n        id: valorDrumPad[0].id \r\n      });\r\n      this.playSound()\r\n   \r\n }\r\n}\r\n\r\nbank(){\r\n  if(this.state.estado === backOne){\r\n    this.setState({\r\n      estado: backTwo,\r\n      bank: 2\r\n    });\r\n  } else {\r\n    this.setState({\r\n      estado: backOne,\r\n      bank: 1\r\n    });\r\n  }\r\n}\r\n\r\nobtenerValor(e){\r\n  console.log(e)\r\n  if(this.state.power === true){\r\n      let valorDrumPad = this.state.estado.filter(i => i.keyTrigger === e.target.value)\r\n      this.setState({\r\n        url: valorDrumPad[0].url,\r\n        id: valorDrumPad[0].id \r\n      });\r\n\r\n      this.playSound()\r\n    }\r\n}\r\n\r\nplaySound(){\r\n  const audio = new Audio();\r\n  audio.src = this.state.url\r\n\r\n  audio.currentTime = 0;\r\n    audio.play()\r\n\r\n}\r\n\r\nencendido(){\r\n  if(this.state.power === true){\r\n    this.setState({\r\n      power: false,\r\n      powerSignal:'off'\r\n    });\r\n  } else {\r\n    this.setState({\r\n      power: true,\r\n      powerSignal:'on'\r\n    });\r\n  }\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container d-flex flex-row\">\r\n              <div className=\"drum-pad\">\r\n                  <button className='btn ' name=\"Q\" value=\"Q\" onClick={this.obtenerValor}> Q </button>\r\n                  <button className='btn ' name=\"W\" value=\"W\" onClick={this.obtenerValor}> W </button>\r\n                  <button className='btn ' name=\"E\" value=\"E\" onClick={this.obtenerValor}> E </button>\r\n                  <button className='btn ' name=\"A\" value=\"A\" onClick={this.obtenerValor}> A </button>\r\n                  <button className='btn ' name=\"S\" value=\"S\" onClick={this.obtenerValor}> S </button>\r\n                  <button className='btn ' name=\"D\" value=\"D\" onClick={this.obtenerValor}> D </button>\r\n                  <button className='btn ' name=\"Z\" value=\"Z\" onClick={this.obtenerValor}> Z </button>\r\n                  <button className='btn ' name=\"X\" value=\"X\" onClick={this.obtenerValor}> X </button>\r\n                  <button className='btn ' name=\"C\" value=\"C\" onClick={this.obtenerValor}> Y </button>\r\n              </div>\r\n              <div className=\"drum-control d-flex flex-column\">\r\n                \r\n              <p className=\"display\">{this.state.id}</p>\r\n              <button name=\"power\" value=\"power\" onClick={this.encendido} className=\"control\"> {this.state.powerSignal} </button>\r\n              <button name=\"bank\" value=\"bank\" onClick={this.bank} className=\"control\"> Bank {this.state.bank} </button>\r\n              </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pruebas;","import React from 'react';\nimport './App.css';\n\nimport Pruebas from './Components/Pruebas'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n                                                              \n      <Pruebas />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}